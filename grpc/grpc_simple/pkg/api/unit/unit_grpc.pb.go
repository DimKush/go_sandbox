// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package unit_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetingSampleClient is the client API for GreetingSample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingSampleClient interface {
	// Sends a greeting
	GetUnitById(ctx context.Context, in *UnitId, opts ...grpc.CallOption) (*UnitsResponce, error)
}

type greetingSampleClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingSampleClient(cc grpc.ClientConnInterface) GreetingSampleClient {
	return &greetingSampleClient{cc}
}

func (c *greetingSampleClient) GetUnitById(ctx context.Context, in *UnitId, opts ...grpc.CallOption) (*UnitsResponce, error) {
	out := new(UnitsResponce)
	err := c.cc.Invoke(ctx, "/uint.v1.GreetingSample/GetUnitById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreetingSampleServer is the server API for GreetingSample service.
// All implementations must embed UnimplementedGreetingSampleServer
// for forward compatibility
type GreetingSampleServer interface {
	// Sends a greeting
	GetUnitById(context.Context, *UnitId) (*UnitsResponce, error)
	mustEmbedUnimplementedGreetingSampleServer()
}

// UnimplementedGreetingSampleServer must be embedded to have forward compatible implementations.
type UnimplementedGreetingSampleServer struct {
}

func (UnimplementedGreetingSampleServer) GetUnitById(context.Context, *UnitId) (*UnitsResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnitById not implemented")
}
func (UnimplementedGreetingSampleServer) mustEmbedUnimplementedGreetingSampleServer() {}

// UnsafeGreetingSampleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingSampleServer will
// result in compilation errors.
type UnsafeGreetingSampleServer interface {
	mustEmbedUnimplementedGreetingSampleServer()
}

func RegisterGreetingSampleServer(s grpc.ServiceRegistrar, srv GreetingSampleServer) {
	s.RegisterService(&GreetingSample_ServiceDesc, srv)
}

func _GreetingSample_GetUnitById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingSampleServer).GetUnitById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uint.v1.GreetingSample/GetUnitById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingSampleServer).GetUnitById(ctx, req.(*UnitId))
	}
	return interceptor(ctx, in, info, handler)
}

// GreetingSample_ServiceDesc is the grpc.ServiceDesc for GreetingSample service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetingSample_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uint.v1.GreetingSample",
	HandlerType: (*GreetingSampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUnitById",
			Handler:    _GreetingSample_GetUnitById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/unit/unit.proto",
}
